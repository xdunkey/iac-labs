name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Wykonaj pipeline przy pushu na główną gałąź
  pull_request:
    branches:
      - main  # Wykonaj pipeline przy tworzeniu pull requesta do głównej gałęzi

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # Testowanie na Ubuntu i Windows
    runs-on: ${{ matrix.os }}  # Wybór systemu operacyjnego na podstawie matrix
    defaults:
      run:
        working-directory: ./example-app  # Ustawienie domyślnego katalogu roboczego
        shell: bash  # Użycie powłoki bash na wszystkich systemach, także Windows
    steps:
    - uses: actions/checkout@v4  # Checkout kodu źródłowego
    - name: Set up Python 3.11
      uses: actions/setup-python@v3  # Konfiguracja środowiska Python
      with:
        python-version: "3.11"  # Użycie wersji Pythona 3.11
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4  # Instalacja Poetry
    - name: Install Poetry Deps
      run: poetry install --no-root  # Instalacja zależności
    - name: Cache build venv
      id: cached-poetry-dependencies  # Cache wirtualnego środowiska
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/iac-labs/example-app/.venv  # Ścieżka do zależności
        key: ${{ runner.os }}-venv  # Klucz cache, aby pamiętać zależności

  lint:
    runs-on: ubuntu-latest  # Uruchamianie na Ubuntu
    needs: build  # Uzależnienie od zakończenia joba build
    defaults:
      run:
        working-directory: ./example-app  # Domyślny katalog roboczy
    steps:
    - uses: actions/checkout@v4  # Checkout kodu źródłowego
    - name: Set up Python 3.11
      uses: actions/setup-python@v3  # Konfiguracja środowiska Python
      with:
        python-version: "3.11"  # Wersja Pythona 3.11
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4  # Instalacja Poetry
    - name: Cache build venv
      id: cached-poetry-dependencies  # Cache wirtualnego środowiska
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/iac-labs/example-app/.venv  # Ścieżka do zależności
        key: ${{ runner.os }}-venv  # Klucz cache
    - name: Run Lint
      run: poetry run task lint  # Uruchomienie lintingu

  zabezpieczenia:
    runs-on: ubuntu-latest  # Uruchamianie na Ubuntu
    needs: build  # Uzależnienie od zakończenia joba build
    defaults:
      run:
        working-directory: ./example-app  # Domyślny katalog roboczy
    steps:
    - uses: actions/checkout@v4  # Checkout kodu źródłowego
    - name: Set up Python 3.11
      uses: actions/setup-python@v3  # Konfiguracja środowiska Python
      with:
        python-version: "3.11"  # Wersja Pythona 3.11
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4  # Instalacja Poetry
    - name: Cache build venv
      id: cached-poetry-dependencies  # Cache wirtualnego środowiska
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/iac-labs/example-app/.venv  # Ścieżka do zależności
        key: ${{ runner.os }}-venv  # Klucz cache
    - name: Run Sec
      run: poetry run task security  # Uruchomienie analizy bezpieczeństwa

  formatowanie:
    runs-on: ubuntu-latest  # Uruchamianie na Ubuntu
    needs: build  # Uzależnienie od zakończenia joba build
    defaults:
      run:
        working-directory: ./example-app  # Domyślny katalog roboczy
    steps:
    - uses: actions/checkout@v4  # Checkout kodu źródłowego
    - name: Set up Python 3.11
      uses: actions/setup-python@v3  # Konfiguracja środowiska Python
      with:
        python-version: "3.11"  # Wersja Pythona 3.11
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4  # Instalacja Poetry
    - name: Cache build venv
      id: cached-poetry-dependencies  # Cache wirtualnego środowiska
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/iac-labs/example-app/.venv  # Ścieżka do zależności
        key: ${{ runner.os }}-venv  # Klucz cache
    - name: Run Format
      run: poetry run task formatter  # Uruchomienie formatowania kodu

  testunitu:
    runs-on: ubuntu-latest  # Uruchamianie na Ubuntu
    needs: [lint, formatowanie, zabezpieczenia]  # Uzależnienie od zakończenia jobów lint, formatowanie i zabezpieczenia
    defaults:
      run:
        working-directory: ./example-app  # Domyślny katalog roboczy
    steps:
    - uses: actions/checkout@v4  # Checkout kodu źródłowego
    - name: Set up Python 3.11
      uses: actions/setup-python@v3  # Konfiguracja środowiska Python
      with:
        python-version: "3.11"  # Wersja Pythona 3.11
    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4  # Instalacja Poetry
    - name: Cache build venv
      id: cached-poetry-dependencies  # Cache wirtualnego środowiska
      uses: actions/cache@v3
      with:
        path: /home/runner/work/iac-labs/iac-labs/example-app/.venv  # Ścieżka do zależności
        key: ${{ runner.os }}-venv  # Klucz cache
    - name: Run tests
      run: poetry run task test  # Uruchomienie testów jednostkowych
